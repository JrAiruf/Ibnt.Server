// <auto-generated />
using System;
using App.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Infra.Migrations
{
    [DbContext(typeof(IbntDbContext))]
    partial class IbntDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Announcement.AnnouncementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FixedWarning")
                        .HasColumnType("boolean");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("App.Domain.Entities.Reactions.ReactionBibleMessageEntity", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("BibleMessageId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Toogled")
                        .HasColumnType("boolean");

                    b.HasKey("MemberId", "BibleMessageId");

                    b.HasIndex("BibleMessageId");

                    b.ToTable("BibleMessageReaction");
                });

            modelBuilder.Entity("App.Domain.Entities.Reactions.ReactionEventEntity", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("EventId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("MemberEntityId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Toogled")
                        .HasColumnType("boolean");

                    b.HasKey("MemberId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberEntityId");

                    b.ToTable("EventReaction");
                });

            modelBuilder.Entity("App.Domain.Entities.Reactions.ReactionPostEntity", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PostId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Toogled")
                        .HasColumnType("boolean");

                    b.HasKey("MemberId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostReaction");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.BibleMessageEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("BaseText")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreationDate")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Date")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PostDate")
                        .HasColumnType("character varying(48)");

                    b.Property<Guid?>("TimeLineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TimeLineId");

                    b.ToTable("BibleMessage");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.EventEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreationDate")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Date")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("MemberId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PostDate")
                        .HasColumnType("character varying(48)");

                    b.Property<Guid?>("TimeLineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TimeLineId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.PostEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreationDate")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Date")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemberId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("PostDate")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.TimeLineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreationDate")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Date")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("PostDate")
                        .HasColumnType("character varying(48)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeLine");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.Auth.AuthCredentialEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("MemberId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Credential");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.Auth.RecoveryPasswordEntity", b =>
                {
                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("NewPassword")
                        .HasColumnType("text");

                    b.Property<string>("VerificationEmail")
                        .HasColumnType("text");

                    b.HasKey("VerificationCode");

                    b.ToTable("RecoveryPassword");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.MemberEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("App.Domain.Entities.Announcement.AnnouncementEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.MemberEntity", "Member")
                        .WithMany("Announcements")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("App.Domain.Entities.Reactions.ReactionBibleMessageEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.TimeLine.BibleMessageEntity", "BibleMessage")
                        .WithMany("Reactions")
                        .HasForeignKey("BibleMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BibleMessage");
                });

            modelBuilder.Entity("App.Domain.Entities.Reactions.ReactionEventEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.TimeLine.EventEntity", "Event")
                        .WithMany("Reactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Users.MemberEntity", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MemberEntityId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("App.Domain.Entities.Reactions.ReactionPostEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.TimeLine.PostEntity", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.BibleMessageEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.MemberEntity", "Member")
                        .WithMany("BibleMessages")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.TimeLine.TimeLineEntity", "TimeLine")
                        .WithMany("BibleMessages")
                        .HasForeignKey("TimeLineId");

                    b.Navigation("Member");

                    b.Navigation("TimeLine");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.EventEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.MemberEntity", "Member")
                        .WithMany("Events")
                        .HasForeignKey("MemberId");

                    b.HasOne("App.Domain.Entities.TimeLine.TimeLineEntity", "TimeLine")
                        .WithMany("Events")
                        .HasForeignKey("TimeLineId");

                    b.Navigation("Member");

                    b.Navigation("TimeLine");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.PostEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.MemberEntity", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.Auth.AuthCredentialEntity", b =>
                {
                    b.HasOne("App.Domain.Entities.Users.MemberEntity", "Member")
                        .WithOne("Credential")
                        .HasForeignKey("App.Domain.Entities.Users.Auth.AuthCredentialEntity", "MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.BibleMessageEntity", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.EventEntity", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.PostEntity", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("App.Domain.Entities.TimeLine.TimeLineEntity", b =>
                {
                    b.Navigation("BibleMessages");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("App.Domain.Entities.Users.MemberEntity", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("BibleMessages");

                    b.Navigation("Credential");

                    b.Navigation("Events");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
