// <auto-generated />
using System;
using Ibnt.Server.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ibnt.Server.Infra.Data.Migrations
{
    [DbContext(typeof(IbntDbContext))]
    partial class IbntDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("EventEntityMemberEntity", b =>
                {
                    b.Property<Guid>("EventsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("TEXT");

                    b.HasKey("EventsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("EventEntityMemberEntity");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.Reactions.ReactionEntity", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Toogled")
                        .HasColumnType("INTEGER");

                    b.HasKey("MemberId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.TimeLine.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.Users.AuthCredentialEntity", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Email");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.Users.MemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("EventEntityMemberEntity", b =>
                {
                    b.HasOne("Ibnt.Server.Domain.Entities.TimeLine.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ibnt.Server.Domain.Entities.Users.MemberEntity", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.Reactions.ReactionEntity", b =>
                {
                    b.HasOne("Ibnt.Server.Domain.Entities.TimeLine.EventEntity", "Event")
                        .WithMany("Reactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ibnt.Server.Domain.Entities.Users.MemberEntity", "Member")
                        .WithMany("Reactions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.Users.AuthCredentialEntity", b =>
                {
                    b.HasOne("Ibnt.Server.Domain.Entities.Users.MemberEntity", "Member")
                        .WithOne("Credential")
                        .HasForeignKey("Ibnt.Server.Domain.Entities.Users.AuthCredentialEntity", "MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.TimeLine.EventEntity", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Ibnt.Server.Domain.Entities.Users.MemberEntity", b =>
                {
                    b.Navigation("Credential");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
